package com.myweb.www.controller;


import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

// @RequiredArgsConstructor 선언 후 
// private final로 객체 등록 => 생성자 주입

@Slf4j
@RequestMapping("/board/")
@RequiredArgsConstructor
@Controller
public class BoardController {
	
	
	private final BoardService bsv;
	
	private final FileHandler fh;
	
	@GetMapping("/register")
	public void register() {}
	
	@PostMapping("/register")
	public String insert(BoardVO bvo,
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(">>>> bvo >>>>> {} " , bvo);
		List<FileVO> flist = null;
		
		// fileHandler 생성  multipartfile -> flist
		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files);
		}
		
		int isOk = bsv.insert(new BoardDTO(bvo, flist));
		return "index";
	}
	
	@GetMapping("/list")
	public void list(Model m, PagingVO pgvo) {
		log.info(">>>> PagingVO >> {}", pgvo);
		
		//페이징 처리 
		List<BoardVO> list = bsv.getList(pgvo);
		//totalCount 구하기
		int totalCount = bsv.gettotalCount(pgvo);
		PagingHandler ph = new PagingHandler(pgvo, totalCount);
		
		m.addAttribute("list", list);
		m.addAttribute("ph", ph);
	}
	
	@GetMapping({"/detail","/modify"})
	public void detail(@RequestParam("bno")int bno, Model m) {
		BoardDTO bvo = bsv.getDetail(bno);
		log.info(">>> bno >> "+ bno);
		m.addAttribute("bvo", bvo); 
	}
	
	@PostMapping("/modify")
	public String modify(BoardVO bvo) {
		log.info("bvo >>>>>>>>: "+bvo);
		bsv.update(bvo);
		return "redirect:/board/detail?bno="+bvo.getBno();
	}
	
	@GetMapping("/remove")
	public String remove(@RequestParam("bno")int bno, RedirectAttributes re) {
		log.info(">>>> bno >> {} "+ bno);
		int isOk = bsv.remove(bno);
		//페이지가 새로고침 될 때 남아있을 필요가 없는 데이터
		//리다이렉트 될 때 데이터를 보내는 객체(RedirectAttributes)
		//한번만 일회성으로 데이터 보낼때 사용
		re.addFlashAttribute("isDel", isOk);
		return "redirect:/board/list";
	}
	
	
}
